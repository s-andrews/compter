#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
use Cwd;
use FindBin qw($Bin);
$|++;

our $VERSION = "0.3";

#############################################################################
#                                                                           #
#    This program is free software: you can redistribute it and/or modify   #
#    it under the terms of the GNU General Public License as published by   #
#    the Free Software Foundation, either version 3 of the License, or      #
#    (at your option) any later version.                                    #
#                                                                           #
#    This program is distributed in the hope that it will be useful,        #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of         #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
#    GNU General Public License for more details.                           #
#                                                                           #
#    You should have received a copy of the GNU General Public License      #
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.  #
#                                                                           #
#############################################################################


my $help;
my $gc;
my $mink;
my $maxk;
my $maxseq;
my $outfile;
my $bg_option;
my $save_background;
my $bglist;
my $quiet;
my $nograph;
my $version;
my $r_path = "R";
my $subset;
my $no_bg_correction = 0;
my $svg = 0;
my $nogroup = 0;

unless (
		GetOptions (
				"help" => \$help,
				"gc=i"   => \$gc,
				"mink=i"  => \$mink,
				"maxk=i" => \$maxk,
				"maxseq=i" => \$maxseq,
				"outfile=s" => \$outfile,
				"background=s" => \$bg_option,
				"savebg=s" => \$save_background,
				"quiet" => \$quiet,
				"nograph" => \$nograph,
				"bglist" => \$bglist,
				"version" => \$version,
				"rpath=s" => \$r_path,
				"subset" => \$subset,
				"svg" => \$svg,
				"nogroup" => \$nogroup,
		)
		) {die "Failed to parse options\n";}

if ($help) {
		print while (<DATA>);
		exit;
}

if ($version) {
		print "Compter version $VERSION\n\n";
		exit;
}

$svg = $svg ? "TRUE" : "FALSE";

$nogroup = $nogroup ? "FALSE" : "TRUE";

if ($bglist) {
		chdir "$Bin/backgrounds" or die "Can't move to backgrounds directory: $!";
		my @backgrounds = <*.cmp>;

		if (@backgrounds) {
				warn "\nBackgrounds available\n---------------------\n";

				foreach my $b (@backgrounds) {
						$b =~ s/\.cmp$//;
						warn "  $b\n";
				}
				warn "\n";
		}

		else {
				warn "No pre-computed backgrounds found\n";
		}

		exit;

}

my @files = @ARGV;

unless ($outfile and @files) {
		die "Usage is compter --outfile [outfile] [fasta_file1].. [fastq_file_x]\nRun compter --help for more options\n";
}

check_arguments();


my $background = make_background();

open (OUT, '>', $outfile) or die "Failed to write to '$outfile': $!";

# Write the header first...

my @kmer_names = get_valid_kmers();

print OUT join("\t",("Sequence","File",@kmer_names)),"\n";

my %matrix_intervals;   # %{input_filemame} = interval : (gives the interval for subsetting output matrix, where necessary)
foreach my $file (@files) {
		if($subset){
			my $file_to_process = subset_file($file);
			$matrix_intervals{$file_to_process} = process_file($file_to_process);
			unlink $file_to_process if ($file_to_process ne $file);    #Delete subset files
		} else {
			$matrix_intervals{$file} = process_file ($file);
		}
}

close OUT or die "Couldn't write to $outfile: $!";

unless ($nograph) {

		#Check whether need to subset the data matrix before plotting the heatmap
		my $perform_subset_flag = 0;
		foreach my $file (keys %matrix_intervals){
			if( $matrix_intervals{$file} > 1 ){
				$perform_subset_flag = 1;
				last;
			}
		}

		if($perform_subset_flag) {
			$quiet or warn "Subsetting data matrix '$outfile' for heatmap generation\n";
	
			my $heatmap_subset_file = "$outfile.heatmap.subset.txt";
			my %counter;   #Records the lines encountered in the heatmap file
			
			open (HEATMAP_DATA, '<', $outfile) or die "Can't read $outfile: $!"; 
			open (HEATMAP_SUBSET, '>', $heatmap_subset_file) or die "Could not write to $heatmap_subset_file\n";
			print HEATMAP_SUBSET scalar(<HEATMAP_DATA>);   #Print header
			
			while(<HEATMAP_DATA>){
				my $line = $_;
				my (undef, $file) = split(/\t/, $line);
				$counter{$file}++;

				if( (!exists $matrix_intervals{$file}) or (($counter{$file} % $matrix_intervals{$file}) == 0) ) {   #Subset EACH dataset SEPARATELY
					print HEATMAP_SUBSET $line;
				}
			}
			close HEATMAP_DATA or die "Could not close filehandle on '$outfile': $!";
			close HEATMAP_SUBSET, or die "Could not close filehandle on '$heatmap_subset_file' : $!";

			draw_heatmap($heatmap_subset_file);
			unlink($heatmap_subset_file);
			
		} else {
			draw_heatmap($outfile);
		}
}

$quiet or warn "Done\n";

exit (0);



sub subset_file {
	my ($file) = @_;

	$quiet or warn "Counting reads in $file\n";
	open (SUBSET_IN, $file) or die "Can't read $file: $!";

	my $count = 0;
	while (<SUBSET_IN>) {
		++$count if (/^>/);
	}
	
	close SUBSET_IN or die "Could not close filehandle on '$file' : $!";

	my $subset_count = defined $maxseq ? $maxseq : 1000;    #1000 is default value
	my $subset_file;

	if($count > $subset_count * 2){   #Make reduction
		my $interval = sprintf( "%.0f", ( $count / $subset_count ) );
    	$quiet or warn "Making reduced sequence file with ratio $interval:1\n";
    	
		$subset_file = "$file.subset.fa";
		open (SUBSET_IN2, $file) or die "Can't read $file: $!";
		open (SUBSET_OUT, '>', $subset_file) or die "Could not write to $subset_file\n";
		$count = 0;
		
		while (<SUBSET_IN2>) {
			my $line = $_;
			++$count if $line =~ (/^>/);
			print SUBSET_OUT $line unless ($count % $interval);
		}

		close SUBSET_OUT or die "Could not close filehandle on '$subset_file' : $!";
		close SUBSET_IN2 or die "Could not close filehandle on '$file' : $!";

	} else {
		$quiet or warn "Not making subset of $subset_count since $count actual sequences is too low or close enough\n";
	} 
	if(defined $subset_file){
		return $subset_file;
	} else {
		return $file;
	}
}



sub draw_heatmap {
		
		$quiet or warn "Drawing heatmap\n";

		my ($infile) = @_;
		my $dir = getcwd;
		my $outfile = $infile;
		$outfile =~ s/\.txt$//;

		if ($svg eq "TRUE") {
				$outfile .= ".svg";
		}
		else {
				$outfile .= ".png";
		}

		my $r_script = <<"END_SCRIPT";
directory <- "$dir"
file <- "$infile"
outfile <- "$outfile"
use.svg <- $svg

setwd(directory)
library(pheatmap)

read.delim(file,check.names=FALSE, stringsAsFactors=FALSE) -> compter.data

compter.data[[2]] -> group.names


as.data.frame(t(compter.data[,3:ncol(compter.data)])) -> compter.data
data.frame(Var1=group.names) -> group.annotation
rownames(group.annotation) <- colnames(compter.data)

max.value = max(compter.data)
min.value = min(0-compter.data)

if (max.value < min.value) {
  max.value = min.value
  min.value = 0-min.value
} else {
  min.value = 0-max.value
}

if (use.svg) {
		svg(filename = outfile,pointsize=8, width = 9, height = as.integer(max(2,1+(0.15*nrow(compter.data)))))
} else {
		png(filename = outfile,width = 900, height = max(200,60+(12*nrow(compter.data))))
}

dim(compter.data)

pheatmap(compter.data,
         annotation=group.annotation,
         show_colnames=FALSE,
         main=file,
				 cluster_cols=$nogroup,
         breaks=seq(from=min.value,to=max.value,length.out=50),
         color=colorRampPalette(c("magenta","white","green"))(50),
         border.color = NA)
dev.off()

END_SCRIPT

open (IN, "| \"$r_path\" --no-save > /dev/null 2>&1") or die "Can't open pipe to '$r_path'  - do you need to set an rpath?";

		print IN $r_script;

		close IN or die "Can't write to '$r_path' pipe  - do you need to set an rpath?";

}


sub process_file {

		my ($file) = @_;

		$quiet or warn "Processing $file\n";
		
		my @seqdata;
		my @seqnames;

		my $id;
		my $seq;

		open (IN,$file) or die "Can't read $file: $!";

		my $count = 0;

		while (<IN>) {

				if (/>(\S+)/) {
						my $next_name = $1;
						if ($seq) {
								++$count;

								if ($count % 100 == 0) {
										print STDERR ".";
								}

								if ($count == $maxseq) {
										$quiet or $subset or warn "Reached maxseq limit of $maxseq: stopping early\n";   #Message confusing in --subset mode, do don't display
										last;
								}

								if (length($seq) < $maxk) {
										$quiet or warn "Skipping $id in $file as it's too short (".length($seq).")\n";
								}
								
								# Check for enough valid sequence
								elsif ($seq !~ /[GATC]{$maxk}/i) {
										$quiet or warn "Skipping $id in $file as there isn't enough valid sequence\n";
								}

								else {
										push @seqdata,calculate_enrichment($seq);
										push @seqnames,$id;
								}
						}
						$seq = "";
						$id = $next_name;
				}
				else {
						s/[\r\n]//g;
						next unless ($_);

						$seq .= uc($_);
				}				
		}

		if ($seq) {
				if (length($seq) < $maxk) {
						warn "Skipping $id in $file as it's too short (".length($seq).")\n";
				}
				# Check for enough valid sequence
				elsif ($seq !~ /[GATC]{$maxk}/i) {
						$quiet or warn "Skipping $id in $file as there isn't enough valid sequence\n";
				}
				else {
						push @seqdata,calculate_enrichment($seq);
						push @seqnames,$id;
				}
		}
		print STDERR "\n";

		close IN;

		my @kmer_names = get_valid_kmers();
		my $countlines;

		foreach my $sample_index (0..$#seqnames) {
				my @line = ($seqnames[$sample_index],$file);

				my $sample = $seqdata[$sample_index];

				foreach my $index (0..$#kmer_names) {
						push @line,$sample->[$index];
				}
				print OUT join("\t",@line),"\n";
				$countlines++;
		}
		my $interval = $countlines;
		$interval = sprintf( "%.0f", ( $count / 1000 ) );   #Aim for 1000 lines of data in heatmap data file
		$interval = 1 if($interval == 0);

		return $interval; 
}

sub get_observed_kmers {
		my ($seq,$min,$max) = @_;

		my %observed;

		for my $size ($min..$max) {
				foreach my $start (0..(length($seq)-($size+1))) {
						my $kseq = substr($seq,$start,$size);
						++$observed{$kseq};
				}
		}

		return %observed;
}

sub get_valid_kmers {
		my @kmers = sort keys %$background;

		my @valid;

		foreach my $kmer (@kmers) {
				if (length($kmer) >= $mink and length($kmer) <= $maxk) {
						push @valid,$kmer;
				}

		}

		return @valid;

}

sub calculate_enrichment {

		my ($seq) = @_;

		my @kmers = get_valid_kmers();

		my %raw_observed = get_observed_kmers($seq,$mink,$maxk);

		my %counts_per_size;

		my %observed;

		foreach my $kmer (@kmers) {
				$observed{$kmer} = 0;
		}

		foreach my $kmer (keys %raw_observed) {
				next unless (exists $observed{$kmer});
				$observed{$kmer} = $raw_observed{$kmer};
				$counts_per_size{length($kmer)} += $raw_observed{$kmer};
		}

		my @enrichments;
		
		foreach my $kmer (@kmers) {
				my $freq = $observed{$kmer} / $counts_per_size{length($kmer)};
				unless ($no_bg_correction) {
						if ($freq == 0) {
								$freq = 0.5 / $counts_per_size{length($kmer)};
						}
						my $enrichment = log($freq/$background->{$kmer})/log(2);

						push @enrichments,$enrichment;
				}
				else {
						push @enrichments,$freq;
				}
		}
		
		return \@enrichments;

}


sub check_arguments {
    # Check GC settings
		if ($gc) {
				unless ($gc =~ /^\d+$/) {
						die "GC value $gc wasn't an integer";
				}

				if ($gc < 20 or $gc > 80) {
						die "GC must be in the range 20-80%";
				}
		}
		else {
				$gc = 50;
		}

    # Check kmer range
		if ($mink) {
				unless ($mink =~ /^\d+$/) {
						die "MinK $mink wasn't an integer";
				}
				if ($mink < 1 or $mink > 3) {
						die "MinK must be in the range 1-3%";
				}
		}
		else {
				$mink = 1;
		}

		if ($maxk) {
				unless ($maxk =~ /^\d+$/) {
						die "Maxk $maxk wasn't an integer";
				}
				if ($maxk < 1 or $maxk > 3) {
						die "Maxk must be in the range 1-3%";
				}
		}
		else {
				$maxk = 3
		}
		
		if ($maxk < $mink) {
				die "MaxK value ($maxk) was lower than MinK value ($mink)\n";
		}

		# Maxseq
		if ($maxseq) {
				unless ($maxseq =~ /^\d+$/) {
						die "Maxseq $maxseq wasn't an integer";
				}
				if ($maxseq < 1) {
						die "Maxk must be 1 or more";
				}
		}
		else {
				$maxseq = 1000;
		}
		

		# Outfile
		unless ($outfile) {
				die "Output file (--outfile) wasn't specified\n";
		}

}

sub make_background {

		# We do different things depending on what type of background we're making

		if ($bg_option) {
				# The background can be one of 4 different things
				# 1) A fasta file to compute the background from
				# 2) A pre-calculated compter file
				# 3) The name of a pre-calculated background which exists in the backgrounds folder
				# 4) The word 'none' which will mean we don't do any background correction

				if ($bg_option eq 'none') {
						# We need to make the background data structure as this defines the kmers we're
            # using, but we'll set a flag so it's not used
						$no_bg_correction = 1;
						return(_make_gc_background());
				}
				elsif ($bg_option =~ /\.cmp$/) {
						# It's a compter file
						_make_compter_background($bg_option);
				}
				elsif (-e "$Bin/backgrounds/${bg_option}.cmp") {
						# It's a pre-calculated background
						return(_make_compter_background("$Bin/backgrounds/${bg_option}.cmp"));
				}
				elsif (-e $bg_option) {
						# We assume it's a fasta file
						return(_make_fasta_background($bg_option))
				}
				else {
						die "Couldn't figure out how to make a background from '$bg_option'";
				}

		}

		else {
				return(_make_gc_background());
		}

}

sub _make_fasta_background {

		my ($file) = @_;

		$quiet or warn "Calculating background from sequences in $file\n";

		my $min_used_length = $mink;
		my $max_used_length = $maxk;


		# If we're saving this we need to calculate the full range
		# we'll ever use - even if we're not using it this time.
		if ($save_background) {
				$min_used_length = 1;
				$max_used_length = 3;
		}

		my %kmer_counts;
		my %counts_per_length;

		my @letters = qw(G A T C);

		for my $kmer ($min_used_length..$max_used_length) {
#				warn "Looking at kmer length $kmer\n";
				my @kmers = @letters;
				for (0..($kmer-2)) {
						my @expanded;
						foreach my $existing (@kmers) {
								foreach my $letter (@letters) {
										push @expanded,"$existing$letter";
								}
						}
						@kmers = @expanded;
				}

				foreach my $kmer (@kmers) {
						$kmer_counts{$kmer} = 0;
				}
		}


		# Now we can read the file and calculate the frequencies
		# of the kmers within it

		open (my $SEQ,$file) or die "Can't read sequence file '$file': $!";

		my $seq;
		while (<$SEQ>) {
				s/[\r\n\s]//g;
				if (/^>/) {
						# We're at the start of a new sequence
						if ($seq) {
								my %k = get_observed_kmers($seq,$min_used_length,$max_used_length);

								foreach my $kmer (keys %k) {
										if (exists $kmer_counts{$kmer}) {
												$kmer_counts{$kmer} += $k{$kmer};
												$counts_per_length{length($kmer)} += $k{$kmer};
										}
								}
								$seq = "";
						}
				}
				else {
						$seq .= $_;
				}
		}

		close $SEQ;

		# Process the last sequence
		my %k = get_observed_kmers($seq,$min_used_length,$max_used_length);

		foreach my $kmer (keys %k) {
				if (exists $kmer_counts{$kmer}) {
						$kmer_counts{$kmer} += $k{$kmer};
						$counts_per_length{length($kmer)} += $k{$kmer};
				}
		}

		# Change the absolute values into frequencies

		foreach my $kmer (keys %kmer_counts) {

				$kmer_counts{$kmer} /= $counts_per_length{length($kmer)};

		}

		# Save the file if we need to
		if ($save_background) {
				open (my $BG,'>',$save_background) or die "Can't write to '$save_background': $!";

				foreach my $kmer (sort keys %kmer_counts) {
						print $BG join("\t",$kmer,$kmer_counts{$kmer}),"\n";
				}

		}

		return \%kmer_counts;


}

sub _make_compter_background {

		my ($file) = @_;

		$quiet or warn "Reading background from $file\n\n";

		# A compter background file is simply a 2 column delimited file
		# of kmer vs frequency.  We need to keep a record of the range of
		# lengths that we've seen to ensure that we've covered what we
		# need for the analysis.

		my $min_length_seen;
		my $max_length_seen;

		open (my $COM, $file) or die "Can't read '$file': $!";

		my %freqs;

		while (<$COM>) {
				s/[\r\n]//g;

				my ($kmer,$freq) = split(/\t/);

				my $length = length($kmer);

				unless (defined $min_length_seen) {
						$min_length_seen = $length;
						$max_length_seen = $length;
				}

				$max_length_seen = $length if ($length > $max_length_seen);
				$min_length_seen = $length if ($length < $min_length_seen);

				if (exists $freqs{$kmer}) {
						die "Duplicate frequency found in '$file' for '$kmer'";
				}

				$freqs{$kmer} = $freq;

		}

		close $COM;

		die "Background provided doesn't cover length '$mink'" if ($min_length_seen > $mink);
		die "Background provided doesn't cover length '$maxk'" if ($max_length_seen < $maxk);

		return \%freqs;
}


sub _make_gc_background {

		if ($no_bg_correction) {
				$quiet or warn "Not performing background correction\n";
		}
		else {
				$quiet or warn "Making a background based on %GC=$gc\n";
		}

		my %freqs;

		my @letters = qw(G A T C);

		for my $kmer ($mink..$maxk) {
#				warn "Looking at kmer length $kmer\n";
				my @kmers = @letters;
				for (0..($kmer-2)) {
						my @expanded;
						foreach my $existing (@kmers) {
								foreach my $letter (@letters) {
										push @expanded,"$existing$letter";
								}
						}
						@kmers = @expanded;
				}

				foreach my $kmer (@kmers) {
						my $freq = 1;
						my @letters = split(//,$kmer);
						foreach my $letter (@letters) {
								if ($letter eq 'C' or $letter eq 'G') {
										$freq *= ($gc/2/100);
								}
								else {
										$freq *= ((100-$gc)/2/100);
								}
						}

						$freqs{$kmer} = $freq;

#						warn "Frequency of $kmer is $freq\n";
				}

		}

		return \%freqs;

}




__DATA__

    COMPTER - Comparative visualisation of sequence composition

PURPOSE
-------
Compter is a program which takes in one or more multi-fasta format DNA
sequence files and produces both text and graphical outputs summarising
the contents of the files.  It can be used to look for overall compositional
differences between samples, or to look for compositional sub-groups within
a single sequence set.

USAGE
-----

compter [options] --outfile [outfile] [FASTA file1] [FASTA file2] [FASTA file n]


OPTIONS
-------

--background       Specify the background against which enrichment will be
                   calculated.  The value associated with this can be one 
                   of four different things:

                   1) A (multi) fasta DNA sequence file which will be read
                      to calculate a background.  This can be saved for 
                      future re-use using the --savebg option.

                   2) A pre-calculated background file with a .cmp file 
                      extension which was previously created with the
                      --savebg option.

                   3) A background name. This must match a corresponding
                      file in the "backgrounds" folder of the compter
                      installation.  The name must be supplied without
                      the .cmp extension, so if you specify "human" as
                      the background then a file called "human.cmp" must
                      exist in the backgrounds folder

                   4) The name 'none' which will then calculate composition
                      without any background correction and will just report
                      proportional composition for each kmer in the output.

--bglist           List the names of the available pre-computed backgrouds 
                   available in this installation of compter.  These backgrounds
                   can be specified directly in the --background option

--gc               If no background sequence exists for the analysis you want
                   to perform then you can use a theoretcial background based
                   solely around the GC content of the sequence.

-h --help          Print help message then exit.

--mink             The minimum length of the kmers to be analysed.  Default 1.
                   Valid values are 1,2 or 3.

--maxk             The maximum length of the kmers to be analysed.  Default 3.
                   Valid values are 1,2 or 3.

--maxseq           The maximum number of sequences to be analysed.  This limits
                   how many sequences from each individual file will be used for
                   the calculation.  It\'s generally not a great idea to put 
                   loads of sequences into this analysis as the graphs will not
                   scale to very large sequence numbers.  Default 1000.

-n --nograph       Skip the drawing of the heatmap and just calculate the table
                   of results.

-o --outfile       [Required] The name of the file to write the text 
                   based output to. If graphical output is produced then
                   it will go into a file with this name, with .txt removed
                   from the end and .png added.

-r --rpath         Specify the full path to the R executable (not RScript or R.app)
                   you want to use.  Required when R isn\'t in your path.

--savebg           Specify a file name into which the currently calculated 
                   background will be saved.  Only has any effect when --background
                   is specified with a value which is a (multi) fasta file.

--svg              Graphical output will be written to an SVG file instead of
                   the default PNG.

--subset           Subset the input FASTA files to 1000 reads, unless another value 
                   is specified with the --maxseq option. Reads are selected at 
                   regular intervals, preventing biases that may occur when only 
                   selecting reads from towards the top of the input FASTA file.

-q --quiet         Supress all progress messages

-v --version       Print the version of compter being used, then exit.
